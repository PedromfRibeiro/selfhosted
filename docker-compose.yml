services:
  jellyfin:
    image: jellyfin/jellyfin:${Jellyfin_Version:-latest}
    container_name: jellyfin
    ports:
      - ${Jellyfin_Port}
    volumes:
      - "${SharedVolume}:/media:rw"  # Shared media directory
      - "${SharedVolume}/configs/jellyfin/config:/config:rw"
      - "${SharedVolume}/configs/jellyfin/cache:/cache:rw"
    restart: unless-stopped
    networks:
      - network

  bazarr:
    image: linuxserver/bazarr:${Bazarr_Version:-latest}
    container_name: bazarr
    ports:
      - "${Bazarr_Port}"
    environment:
      - TZ=${TZ}
    volumes:
      - "${SharedVolume}/${MoviesPath}:/movies:rw"
      - "${SharedVolume}/${TvShowsPath}:/tv:rw"
      - "${SharedVolume}/configs/bazarr/config:/config:rw"
    restart: unless-stopped
    networks:
      - network

  radarr:
    image: linuxserver/radarr:${Radarr_Version:-latest}
    container_name: radarr
    ports:
      - "${Radarr_Port}"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - "${SharedVolume}/${MoviesPath}:/movies:rw"
      - "${SharedVolume}/${DonwloadPath}:/downloads:rw"
      - "${SharedVolume}/configs/radarr/config:/config:rw"
    restart: unless-stopped
    networks:
      - network

  sonarr:
    image: linuxserver/sonarr:${Sonarr_Version:-latest}
    container_name: sonarr
    ports:
      - ${Sonarr_Port}
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - "${SharedVolume}/${TvShowsPath}:/tv:rw"
      - "${SharedVolume}/${DonwloadPath}:/downloads:rw"
      - "${SharedVolume}/configs/sonarr/config:/config:rw"
    restart: unless-stopped
    networks:
      - network

  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    ports:
      - ${Homarr_Port}
    volumes:
      - "${SharedVolume}/configs/homarr:/app/data"
      - .${SharedVolume}/configs/homarr/configs:/app/data/configs
      - .${SharedVolume}/configs/homarr/icons:/app/public/icons
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
    networks:
      - network

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    ports:
      - "${jackett_Port}"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - "${SharedVolume}/configs/jackett:/config"
      - "${SharedVolume}/${DonwloadPath}:/downloads"
    restart: unless-stopped
    networks:
      - network

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    ports:
      - ${qbittorrent_Port1}  # Web UI
      - ${qbittorrent_Port2}  # Torrent port
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - "${SharedVolume}/configs/qbittorrent/config:/config:rw"
      - "${SharedVolume}/${DonwloadPath}:/downloads:rw"
    restart: unless-stopped
    networks:
      - network
  
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - ${ImagePath}/Immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '${immich_Port}'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${ImagePath}/Immich/database:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command:
      [
        'postgres',
        '-c',
        'shared_preload_libraries=vectors.so',
        '-c',
        'search_path="$$user", public, vectors',
        '-c',
        'logging_collector=on',
        '-c',
        'max_wal_size=2GB',
        '-c',
        'shared_buffers=512MB',
        '-c',
        'wal_compression=on',
      ]
    restart: always

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    ports:
      - "${Jellyseerr_Port}" # Specify your preferred port or set a default
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info
      - JELLYFIN_URL=http://jellyfin:${Jellyfin_Port} # Link Jellyfin server
      - JELLYSEERR_ADMIN_EMAIL=${Admin_Email} # Optional: Admin email for Jellyseerr
    volumes:
      - "${SharedVolume}/configs/jellyseerr/config:/app/config" # Config storage for Jellyseerr
    restart: unless-stopped
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  model-cache:
  shared-media:
    driver: local
    driver_opts:
      o: bind
      device: ${SharedVolume}
